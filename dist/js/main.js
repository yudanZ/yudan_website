!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=270)}({18:function(t,e,n){(function(e){var r=n(6),o=n(20);function i(){return(new Date).getTime()}var u,c=Array.prototype.slice,a={};u=void 0!==e&&e.console?e.console:"undefined"!=typeof window&&window.console?window.console:{};for(var s=[[function(){},"log"],[function(){u.log.apply(u,arguments)},"info"],[function(){u.log.apply(u,arguments)},"warn"],[function(){u.warn.apply(u,arguments)},"error"],[function(t){a[t]=i()},"time"],[function(t){var e=a[t];if(!e)throw new Error("No such label: "+t);delete a[t];var n=i()-e;u.log(t+": "+n+"ms")},"timeEnd"],[function(){var t=new Error;t.name="Trace",t.message=r.format.apply(null,arguments),u.error(t.stack)},"trace"],[function(t){u.log(r.inspect(t)+"\n")},"dir"],[function(t){if(!t){var e=c.call(arguments,1);o.ok(!1,r.format.apply(null,e))}},"assert"]],l=0;l<s.length;l++){var f=s[l],p=f[0],y=f[1];u[y]||(u[y]=p)}t.exports=u}).call(this,n(7))},2:function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function c(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:u}catch(t){r=u}}();var a,s=[],l=!1,f=-1;function p(){l&&a&&(l=!1,a.length?s=a.concat(s):f=-1,s.length&&y())}function y(){if(!l){var t=c(p);l=!0;for(var e=s.length;e;){for(a=s,s=[];++f<e;)a&&a[f].run();f=-1,e=s.length}a=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===u||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function g(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];s.push(new d(t,e)),1!==s.length||l||c(y)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=g,o.addListener=g,o.once=g,o.off=g,o.removeListener=g,o.removeAllListeners=g,o.emit=g,o.prependListener=g,o.prependOnceListener=g,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},20:function(t,e,n){"use strict";(function(e){var r=n(93);
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */function o(t,e){if(t===e)return 0;for(var n=t.length,r=e.length,o=0,i=Math.min(n,r);o<i;++o)if(t[o]!==e[o]){n=t[o],r=e[o];break}return n<r?-1:r<n?1:0}function i(t){return e.Buffer&&"function"==typeof e.Buffer.isBuffer?e.Buffer.isBuffer(t):!(null==t||!t._isBuffer)}var u=n(6),c=Object.prototype.hasOwnProperty,a=Array.prototype.slice,s="foo"===function(){}.name;function l(t){return Object.prototype.toString.call(t)}function f(t){return!i(t)&&("function"==typeof e.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):!!t&&(t instanceof DataView||!!(t.buffer&&t.buffer instanceof ArrayBuffer))))}var p=t.exports=b,y=/\s*function\s+([^\(\s]*)\s*/;function d(t){if(u.isFunction(t)){if(s)return t.name;var e=t.toString().match(y);return e&&e[1]}}function g(t,e){return"string"==typeof t?t.length<e?t:t.slice(0,e):t}function h(t){if(s||!u.isFunction(t))return u.inspect(t);var e=d(t);return"[Function"+(e?": "+e:"")+"]"}function m(t,e,n,r,o){throw new p.AssertionError({message:n,actual:t,expected:e,operator:r,stackStartFunction:o})}function b(t,e){t||m(t,!0,e,"==",p.ok)}function v(t,e,n,r){if(t===e)return!0;if(i(t)&&i(e))return 0===o(t,e);if(u.isDate(t)&&u.isDate(e))return t.getTime()===e.getTime();if(u.isRegExp(t)&&u.isRegExp(e))return t.source===e.source&&t.global===e.global&&t.multiline===e.multiline&&t.lastIndex===e.lastIndex&&t.ignoreCase===e.ignoreCase;if(null!==t&&"object"==typeof t||null!==e&&"object"==typeof e){if(f(t)&&f(e)&&l(t)===l(e)&&!(t instanceof Float32Array||t instanceof Float64Array))return 0===o(new Uint8Array(t.buffer),new Uint8Array(e.buffer));if(i(t)!==i(e))return!1;var c=(r=r||{actual:[],expected:[]}).actual.indexOf(t);return-1!==c&&c===r.expected.indexOf(e)||(r.actual.push(t),r.expected.push(e),function(t,e,n,r){if(null==t||null==e)return!1;if(u.isPrimitive(t)||u.isPrimitive(e))return t===e;if(n&&Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return!1;var o=w(t),i=w(e);if(o&&!i||!o&&i)return!1;if(o)return t=a.call(t),e=a.call(e),v(t,e,n);var c,s,l=j(t),f=j(e);if(l.length!==f.length)return!1;for(l.sort(),f.sort(),s=l.length-1;s>=0;s--)if(l[s]!==f[s])return!1;for(s=l.length-1;s>=0;s--)if(c=l[s],!v(t[c],e[c],n,r))return!1;return!0}(t,e,n,r))}return n?t===e:t==e}function w(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function O(t,e){if(!t||!e)return!1;if("[object RegExp]"==Object.prototype.toString.call(e))return e.test(t);try{if(t instanceof e)return!0}catch(t){}return!Error.isPrototypeOf(e)&&!0===e.call({},t)}function E(t,e,n,r){var o;if("function"!=typeof e)throw new TypeError('"block" argument must be a function');"string"==typeof n&&(r=n,n=null),o=function(t){var e;try{t()}catch(t){e=t}return e}(e),r=(n&&n.name?" ("+n.name+").":".")+(r?" "+r:"."),t&&!o&&m(o,n,"Missing expected exception"+r);var i="string"==typeof r,c=!t&&o&&!n;if((!t&&u.isError(o)&&i&&O(o,n)||c)&&m(o,n,"Got unwanted exception"+r),t&&o&&n&&!O(o,n)||!t&&o)throw o}p.AssertionError=function(t){var e;this.name="AssertionError",this.actual=t.actual,this.expected=t.expected,this.operator=t.operator,t.message?(this.message=t.message,this.generatedMessage=!1):(this.message=g(h((e=this).actual),128)+" "+e.operator+" "+g(h(e.expected),128),this.generatedMessage=!0);var n=t.stackStartFunction||m;if(Error.captureStackTrace)Error.captureStackTrace(this,n);else{var r=new Error;if(r.stack){var o=r.stack,i=d(n),u=o.indexOf("\n"+i);if(u>=0){var c=o.indexOf("\n",u+1);o=o.substring(c+1)}this.stack=o}}},u.inherits(p.AssertionError,Error),p.fail=m,p.ok=b,p.equal=function(t,e,n){t!=e&&m(t,e,n,"==",p.equal)},p.notEqual=function(t,e,n){t==e&&m(t,e,n,"!=",p.notEqual)},p.deepEqual=function(t,e,n){v(t,e,!1)||m(t,e,n,"deepEqual",p.deepEqual)},p.deepStrictEqual=function(t,e,n){v(t,e,!0)||m(t,e,n,"deepStrictEqual",p.deepStrictEqual)},p.notDeepEqual=function(t,e,n){v(t,e,!1)&&m(t,e,n,"notDeepEqual",p.notDeepEqual)},p.notDeepStrictEqual=function t(e,n,r){v(e,n,!0)&&m(e,n,r,"notDeepStrictEqual",t)},p.strictEqual=function(t,e,n){t!==e&&m(t,e,n,"===",p.strictEqual)},p.notStrictEqual=function(t,e,n){t===e&&m(t,e,n,"!==",p.notStrictEqual)},p.throws=function(t,e,n){E(!0,t,e,n)},p.doesNotThrow=function(t,e,n){E(!1,t,e,n)},p.ifError=function(t){if(t)throw t},p.strict=r((function t(e,n){e||m(e,!0,n,"==",t)}),p,{equal:p.strictEqual,deepEqual:p.deepStrictEqual,notEqual:p.notStrictEqual,notDeepEqual:p.notDeepStrictEqual}),p.strict.strict=p.strict;var j=Object.keys||function(t){var e=[];for(var n in t)c.call(t,n)&&e.push(n);return e}}).call(this,n(7))},270:function(t,e,n){(function(t){function e(t,e,n){var r,o,i=(r=450,(o=window.innerHeight)>500&&(r=400),o>680&&(r=300),o>830&&(r=210),r),u="center "+(e*t.scrollTop()-i)+"px";n.css({"background-position":u})}$(document).ready((function(){!function(t,n,r){n=1-(n=void 0!==n?n:.5);var o=$(document);r?e(o,n,t):$(window).scroll((function(){e(o,n,t)}))}($(".header__parallax"),.3,!1),$(window).scroll((function(t){$(document).scrollTop()>120?$(".header__navbar").addClass("scroll"):$(".header__navbar").removeClass("scroll")})),$("#tmNav a").on("click",(function(){$(".navbar-collapse").removeClass("show")})),$("#tmNav").singlePageNav({easing:"easeInOutExpo",speed:600,filter:".link-inner"}),$("a").on("click",(function(t){if(""!==this.hash){t.preventDefault();var e=this.hash;$("html, body").animate({scrollTop:$(e).offset().top},600,"easeInOutExpo",(function(){window.location.hash=e}))}})),$(".instragram-container").magnificPopup({delegate:"a",type:"image",gallery:{enabled:!0}}),$(".simple-ajax-popup-align-top").magnificPopup({type:"ajax",alignTop:!0,overflowY:"scroll"});var n=[];document.querySelector(".instragram-container");const r=["caption","children{media_type,media_url,thumbnail_url}","id","media_type","media_url","permalink","thumbnail_url","timestamp"].join(",");$.ajax({url:`https://graph.instagram.com/17841401812340214/media?fields=${r}&access_token=IGQVJYUGo4TC1ua0hWLXFGTzRONDdTTldsVHJtWEFwQXl2THRKeEVfMlMxZA0NoQUN3dTU0ZA0xlRHdSajdWMUZAlNlZAmTTdZAX2RfS0E4dTJ1WnpWbmljc1YzV0J3OTZAhNThEZA3FmbTdn`,dataType:"jsonp",type:"GET",data:{},success:function(t){$.each(t.data,(function(t,e){"IMAGE"===e.media_type?n.push(e):"CAROUSEL_ALBUM"===e.media_type&&$.each(e.children.data,(function(t,r){"IMAGE"===r.media_type&&(r.caption||(r.caption=e.caption),n.push(r))}))})),n.forEach(t=>{((t,e)=>{const n=`\n        <a href="${t.media_url}">\n        <figure class="instragram__container__item">\n        <img src="${t.media_url}" class="instragram__container__img" alt="">\n        <figcaption>\n            <h2>\n            <i>${t.caption?t.caption:""}\n            </i>\n            </h2>\n        </figcaption>\n        </figure>\n    </a>\n        `;e.insertAdjacentHTML("beforeend",n)})(t,document.querySelector(".instragram-container"))}),$(".instragram-container").slick({dots:!0,infinite:!1,slidesToShow:4,slidesToScroll:2,responsive:[{breakpoint:1199,settings:{slidesToShow:4,slidesToScroll:2}},{breakpoint:991,settings:{slidesToShow:3,slidesToScroll:2}},{breakpoint:767,settings:{slidesToShow:2,slidesToScroll:1}},{breakpoint:480,settings:{slidesToShow:1,slidesToScroll:1}}]})},error:function(e){t.log(e)}})}))}).call(this,n(18))},6:function(t,e,n){(function(t,r){var o=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++)n[e[r]]=Object.getOwnPropertyDescriptor(t,e[r]);return n},i=/%[sdj%]/g;e.format=function(t){if(!b(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(a(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,o=r.length,u=String(t).replace(i,(function(t){if("%%"===t)return"%";if(n>=o)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}})),c=r[n];n<o;c=r[++n])h(c)||!O(c)?u+=" "+c:u+=" "+a(c);return u},e.deprecate=function(n,o){if(void 0!==t&&!0===t.noDeprecation)return n;if(void 0===t)return function(){return e.deprecate(n,o).apply(this,arguments)};var i=!1;return function(){if(!i){if(t.throwDeprecation)throw new Error(o);t.traceDeprecation?r.trace(o):r.error(o),i=!0}return n.apply(this,arguments)}};var u,c={};function a(t,n){var r={seen:[],stylize:l};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),g(n)?r.showHidden=n:n&&e._extend(r,n),v(r.showHidden)&&(r.showHidden=!1),v(r.depth)&&(r.depth=2),v(r.colors)&&(r.colors=!1),v(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=s),f(r,t,r.depth)}function s(t,e){var n=a.styles[e];return n?"["+a.colors[n][0]+"m"+t+"["+a.colors[n][1]+"m":t}function l(t,e){return t}function f(t,n,r){if(t.customInspect&&n&&T(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var o=n.inspect(r,t);return b(o)||(o=f(t,o,r)),o}var i=function(t,e){if(v(e))return t.stylize("undefined","undefined");if(b(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}if(m(e))return t.stylize(""+e,"number");if(g(e))return t.stylize(""+e,"boolean");if(h(e))return t.stylize("null","null")}(t,n);if(i)return i;var u=Object.keys(n),c=function(t){var e={};return t.forEach((function(t,n){e[t]=!0})),e}(u);if(t.showHidden&&(u=Object.getOwnPropertyNames(n)),j(n)&&(u.indexOf("message")>=0||u.indexOf("description")>=0))return p(n);if(0===u.length){if(T(n)){var a=n.name?": "+n.name:"";return t.stylize("[Function"+a+"]","special")}if(w(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(E(n))return t.stylize(Date.prototype.toString.call(n),"date");if(j(n))return p(n)}var s,l="",O=!1,S=["{","}"];(d(n)&&(O=!0,S=["[","]"]),T(n))&&(l=" [Function"+(n.name?": "+n.name:"")+"]");return w(n)&&(l=" "+RegExp.prototype.toString.call(n)),E(n)&&(l=" "+Date.prototype.toUTCString.call(n)),j(n)&&(l=" "+p(n)),0!==u.length||O&&0!=n.length?r<0?w(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),s=O?function(t,e,n,r,o){for(var i=[],u=0,c=e.length;u<c;++u)A(e,String(u))?i.push(y(t,e,n,r,String(u),!0)):i.push("");return o.forEach((function(o){o.match(/^\d+$/)||i.push(y(t,e,n,r,o,!0))})),i}(t,n,r,c,u):u.map((function(e){return y(t,n,r,c,e,O)})),t.seen.pop(),function(t,e,n){if(t.reduce((function(t,e){return e.indexOf("\n")>=0&&0,t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1];return n[0]+e+" "+t.join(", ")+" "+n[1]}(s,l,S)):S[0]+l+S[1]}function p(t){return"["+Error.prototype.toString.call(t)+"]"}function y(t,e,n,r,o,i){var u,c,a;if((a=Object.getOwnPropertyDescriptor(e,o)||{value:e[o]}).get?c=a.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):a.set&&(c=t.stylize("[Setter]","special")),A(r,o)||(u="["+o+"]"),c||(t.seen.indexOf(a.value)<0?(c=h(n)?f(t,a.value,null):f(t,a.value,n-1)).indexOf("\n")>-1&&(c=i?c.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+c.split("\n").map((function(t){return"   "+t})).join("\n")):c=t.stylize("[Circular]","special")),v(u)){if(i&&o.match(/^\d+$/))return c;(u=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(u=u.substr(1,u.length-2),u=t.stylize(u,"name")):(u=u.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),u=t.stylize(u,"string"))}return u+": "+c}function d(t){return Array.isArray(t)}function g(t){return"boolean"==typeof t}function h(t){return null===t}function m(t){return"number"==typeof t}function b(t){return"string"==typeof t}function v(t){return void 0===t}function w(t){return O(t)&&"[object RegExp]"===S(t)}function O(t){return"object"==typeof t&&null!==t}function E(t){return O(t)&&"[object Date]"===S(t)}function j(t){return O(t)&&("[object Error]"===S(t)||t instanceof Error)}function T(t){return"function"==typeof t}function S(t){return Object.prototype.toString.call(t)}function x(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(n){if(v(u)&&(u=t.env.NODE_DEBUG||""),n=n.toUpperCase(),!c[n])if(new RegExp("\\b"+n+"\\b","i").test(u)){var o=t.pid;c[n]=function(){var t=e.format.apply(e,arguments);r.error("%s %d: %s",n,o,t)}}else c[n]=function(){};return c[n]},e.inspect=a,a.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},a.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=d,e.isBoolean=g,e.isNull=h,e.isNullOrUndefined=function(t){return null==t},e.isNumber=m,e.isString=b,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=v,e.isRegExp=w,e.isObject=O,e.isDate=E,e.isError=j,e.isFunction=T,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=n(91);var _=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function k(){var t=new Date,e=[x(t.getHours()),x(t.getMinutes()),x(t.getSeconds())].join(":");return[t.getDate(),_[t.getMonth()],e].join(" ")}function A(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){r.log("%s - %s",k(),e.format.apply(e,arguments))},e.inherits=n(92),e._extend=function(t,e){if(!e||!O(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t};var P="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function q(t,e){if(!t){var n=new Error("Promise was rejected with a falsy value");n.reason=t,t=n}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(P&&t[P]){var e;if("function"!=typeof(e=t[P]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,P,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,n,r=new Promise((function(t,r){e=t,n=r})),o=[],i=0;i<arguments.length;i++)o.push(arguments[i]);o.push((function(t,r){t?n(t):e(r)}));try{t.apply(this,o)}catch(t){n(t)}return r}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),P&&Object.defineProperty(e,P,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,o(t))},e.promisify.custom=P,e.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function n(){for(var n=[],r=0;r<arguments.length;r++)n.push(arguments[r]);var o=n.pop();if("function"!=typeof o)throw new TypeError("The last argument must be of type Function");var i=this,u=function(){return o.apply(i,arguments)};e.apply(this,n).then((function(e){t.nextTick(u,null,e)}),(function(e){t.nextTick(q,e,u)}))}return Object.setPrototypeOf(n,Object.getPrototypeOf(e)),Object.defineProperties(n,o(e)),n}}).call(this,n(2),n(18))},7:function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},91:function(t,e){t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},92:function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},93:function(t,e,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function u(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(t){r[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var n,c,a=u(t),s=1;s<arguments.length;s++){for(var l in n=Object(arguments[s]))o.call(n,l)&&(a[l]=n[l]);if(r){c=r(n);for(var f=0;f<c.length;f++)i.call(n,c[f])&&(a[c[f]]=n[c[f]])}}return a}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,